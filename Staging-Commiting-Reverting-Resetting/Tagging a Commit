----------------------------------------------------
| *************** Tagging a Commit *************** |
----------------------------------------------------

Git has the ability to tag specific points in a repository’s history as being important. Typically, people use this functionality to mark release points (v1.0, v2.0 and so on).


Listing Tags
------------
	$ git tag 
	$ git tag -l or --list

Creating Tags (Anotated)
------------------------
	git tag -a <version> -m <comment>
	$ git tag -a v1.4 -m "my version 1.4"

Showing Tag Information
-----------------------
	git show <version>
	$ git show v1.4

Tagging a Commit in the past
----------------------------
You can also tag commits after you’ve moved past them. Suppose your commit history looks like this:

$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme

Now, suppose you forgot to tag the project at v1.2, which was at the “Update rakefile” commit. 
You can add it after the fact. To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

	git tag -a <your_version> <commit>
	$ git tag -a v1.2 9fceb02

Sharing Tags (Within Origin Servers)
------------------------------------
By default, the git push command doesn’t transfer tags to remote servers. 
You will have to explicitly push tags to a shared server after you have created them. 
This process is just like sharing remote branches — you can run:

	 git push origin <tagname>
	 $ git push origin v1.5

If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command. 
This will transfer all of your tags to the remote server that are not already there.

	$ git push origin --tags